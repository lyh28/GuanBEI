package com.lyh.guanbei.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyh.guanbei.bean.Setting;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SETTING".
*/
public class SettingDao extends AbstractDao<Setting, Long> {

    public static final String TABLENAME = "SETTING";

    /**
     * Properties of entity Setting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, long.class, "user_id", true, "_id");
        public final static Property Pattern_pwd = new Property(1, String.class, "pattern_pwd", false, "PATTERN_PWD");
        public final static Property Notify_input = new Property(2, boolean.class, "notify_input", false, "NOTIFY_INPUT");
        public final static Property Nodisturb = new Property(3, boolean.class, "nodisturb", false, "NODISTURB");
        public final static Property Nodisturb_start_date = new Property(4, String.class, "nodisturb_start_date", false, "NODISTURB_START_DATE");
        public final static Property Nodisturb_end_date = new Property(5, String.class, "nodisturb_end_date", false, "NODISTURB_END_DATE");
    }


    public SettingDao(DaoConfig config) {
        super(config);
    }
    
    public SettingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SETTING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: user_id
                "\"PATTERN_PWD\" TEXT," + // 1: pattern_pwd
                "\"NOTIFY_INPUT\" INTEGER NOT NULL ," + // 2: notify_input
                "\"NODISTURB\" INTEGER NOT NULL ," + // 3: nodisturb
                "\"NODISTURB_START_DATE\" TEXT," + // 4: nodisturb_start_date
                "\"NODISTURB_END_DATE\" TEXT);"); // 5: nodisturb_end_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SETTING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Setting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
 
        String pattern_pwd = entity.getPattern_pwd();
        if (pattern_pwd != null) {
            stmt.bindString(2, pattern_pwd);
        }
        stmt.bindLong(3, entity.getNotify_input() ? 1L: 0L);
        stmt.bindLong(4, entity.getNodisturb() ? 1L: 0L);
 
        String nodisturb_start_date = entity.getNodisturb_start_date();
        if (nodisturb_start_date != null) {
            stmt.bindString(5, nodisturb_start_date);
        }
 
        String nodisturb_end_date = entity.getNodisturb_end_date();
        if (nodisturb_end_date != null) {
            stmt.bindString(6, nodisturb_end_date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Setting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
 
        String pattern_pwd = entity.getPattern_pwd();
        if (pattern_pwd != null) {
            stmt.bindString(2, pattern_pwd);
        }
        stmt.bindLong(3, entity.getNotify_input() ? 1L: 0L);
        stmt.bindLong(4, entity.getNodisturb() ? 1L: 0L);
 
        String nodisturb_start_date = entity.getNodisturb_start_date();
        if (nodisturb_start_date != null) {
            stmt.bindString(5, nodisturb_start_date);
        }
 
        String nodisturb_end_date = entity.getNodisturb_end_date();
        if (nodisturb_end_date != null) {
            stmt.bindString(6, nodisturb_end_date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Setting readEntity(Cursor cursor, int offset) {
        Setting entity = new Setting( //
            cursor.getLong(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pattern_pwd
            cursor.getShort(offset + 2) != 0, // notify_input
            cursor.getShort(offset + 3) != 0, // nodisturb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nodisturb_start_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // nodisturb_end_date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Setting entity, int offset) {
        entity.setUser_id(cursor.getLong(offset + 0));
        entity.setPattern_pwd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNotify_input(cursor.getShort(offset + 2) != 0);
        entity.setNodisturb(cursor.getShort(offset + 3) != 0);
        entity.setNodisturb_start_date(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNodisturb_end_date(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Setting entity, long rowId) {
        entity.setUser_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Setting entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Setting entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
