package com.lyh.guanbei.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyh.guanbei.bean.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Local_id = new Property(0, Long.class, "local_id", true, "_id");
        public final static Property Record_id = new Property(1, long.class, "record_id", false, "RECORD_ID");
        public final static Property User_id = new Property(2, long.class, "user_id", false, "USER_ID");
        public final static Property Book_id = new Property(3, long.class, "book_id", false, "BOOK_ID");
        public final static Property Book_local_id = new Property(4, long.class, "book_local_id", false, "BOOK_LOCAL_ID");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Amount = new Property(6, double.class, "amount", false, "AMOUNT");
        public final static Property Amount_type = new Property(7, int.class, "amount_type", false, "AMOUNT_TYPE");
        public final static Property Towho = new Property(8, String.class, "towho", false, "TOWHO");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property Category = new Property(10, String.class, "category", false, "CATEGORY");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
    }


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: local_id
                "\"RECORD_ID\" INTEGER NOT NULL ," + // 1: record_id
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: user_id
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 3: book_id
                "\"BOOK_LOCAL_ID\" INTEGER NOT NULL ," + // 4: book_local_id
                "\"DATE\" TEXT," + // 5: date
                "\"AMOUNT\" REAL NOT NULL ," + // 6: amount
                "\"AMOUNT_TYPE\" INTEGER NOT NULL ," + // 7: amount_type
                "\"TOWHO\" TEXT," + // 8: towho
                "\"REMARK\" TEXT," + // 9: remark
                "\"CATEGORY\" TEXT," + // 10: category
                "\"STATUS\" INTEGER NOT NULL );"); // 11: status
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_RECORD_RECORD_ID ON \"RECORD\"" +
                " (\"RECORD_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_RECORD_USER_ID ON \"RECORD\"" +
                " (\"USER_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_RECORD_BOOK_LOCAL_ID ON \"RECORD\"" +
                " (\"BOOK_LOCAL_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long local_id = entity.getLocal_id();
        if (local_id != null) {
            stmt.bindLong(1, local_id);
        }
        stmt.bindLong(2, entity.getRecord_id());
        stmt.bindLong(3, entity.getUser_id());
        stmt.bindLong(4, entity.getBook_id());
        stmt.bindLong(5, entity.getBook_local_id());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
        stmt.bindDouble(7, entity.getAmount());
        stmt.bindLong(8, entity.getAmount_type());
 
        String towho = entity.getTowho();
        if (towho != null) {
            stmt.bindString(9, towho);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(11, category);
        }
        stmt.bindLong(12, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long local_id = entity.getLocal_id();
        if (local_id != null) {
            stmt.bindLong(1, local_id);
        }
        stmt.bindLong(2, entity.getRecord_id());
        stmt.bindLong(3, entity.getUser_id());
        stmt.bindLong(4, entity.getBook_id());
        stmt.bindLong(5, entity.getBook_local_id());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
        stmt.bindDouble(7, entity.getAmount());
        stmt.bindLong(8, entity.getAmount_type());
 
        String towho = entity.getTowho();
        if (towho != null) {
            stmt.bindString(9, towho);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(11, category);
        }
        stmt.bindLong(12, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // local_id
            cursor.getLong(offset + 1), // record_id
            cursor.getLong(offset + 2), // user_id
            cursor.getLong(offset + 3), // book_id
            cursor.getLong(offset + 4), // book_local_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.getDouble(offset + 6), // amount
            cursor.getInt(offset + 7), // amount_type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // towho
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // category
            cursor.getInt(offset + 11) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setLocal_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecord_id(cursor.getLong(offset + 1));
        entity.setUser_id(cursor.getLong(offset + 2));
        entity.setBook_id(cursor.getLong(offset + 3));
        entity.setBook_local_id(cursor.getLong(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAmount(cursor.getDouble(offset + 6));
        entity.setAmount_type(cursor.getInt(offset + 7));
        entity.setTowho(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCategory(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setLocal_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getLocal_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        return entity.getLocal_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
