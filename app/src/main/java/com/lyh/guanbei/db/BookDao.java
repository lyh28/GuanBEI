package com.lyh.guanbei.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyh.guanbei.bean.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Local_id = new Property(0, Long.class, "local_id", true, "_id");
        public final static Property Book_name = new Property(1, String.class, "book_name", false, "BOOK_NAME");
        public final static Property Book_id = new Property(2, long.class, "book_id", false, "BOOK_ID");
        public final static Property Manager_id = new Property(3, long.class, "manager_id", false, "MANAGER_ID");
        public final static Property Person_id = new Property(4, String.class, "person_id", false, "PERSON_ID");
        public final static Property Max_sum = new Property(5, String.class, "max_sum", false, "MAX_SUM");
        public final static Property Now_sum = new Property(6, String.class, "now_sum", false, "NOW_SUM");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: local_id
                "\"BOOK_NAME\" TEXT NOT NULL ," + // 1: book_name
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 2: book_id
                "\"MANAGER_ID\" INTEGER NOT NULL ," + // 3: manager_id
                "\"PERSON_ID\" TEXT," + // 4: person_id
                "\"MAX_SUM\" TEXT," + // 5: max_sum
                "\"NOW_SUM\" TEXT," + // 6: now_sum
                "\"STATUS\" INTEGER NOT NULL );"); // 7: status
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BOOK_MANAGER_ID ON \"BOOK\"" +
                " (\"MANAGER_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long local_id = entity.getLocal_id();
        if (local_id != null) {
            stmt.bindLong(1, local_id);
        }
        stmt.bindString(2, entity.getBook_name());
        stmt.bindLong(3, entity.getBook_id());
        stmt.bindLong(4, entity.getManager_id());
 
        String person_id = entity.getPerson_id();
        if (person_id != null) {
            stmt.bindString(5, person_id);
        }
 
        String max_sum = entity.getMax_sum();
        if (max_sum != null) {
            stmt.bindString(6, max_sum);
        }
 
        String now_sum = entity.getNow_sum();
        if (now_sum != null) {
            stmt.bindString(7, now_sum);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long local_id = entity.getLocal_id();
        if (local_id != null) {
            stmt.bindLong(1, local_id);
        }
        stmt.bindString(2, entity.getBook_name());
        stmt.bindLong(3, entity.getBook_id());
        stmt.bindLong(4, entity.getManager_id());
 
        String person_id = entity.getPerson_id();
        if (person_id != null) {
            stmt.bindString(5, person_id);
        }
 
        String max_sum = entity.getMax_sum();
        if (max_sum != null) {
            stmt.bindString(6, max_sum);
        }
 
        String now_sum = entity.getNow_sum();
        if (now_sum != null) {
            stmt.bindString(7, now_sum);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // local_id
            cursor.getString(offset + 1), // book_name
            cursor.getLong(offset + 2), // book_id
            cursor.getLong(offset + 3), // manager_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // person_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // max_sum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // now_sum
            cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setLocal_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBook_name(cursor.getString(offset + 1));
        entity.setBook_id(cursor.getLong(offset + 2));
        entity.setManager_id(cursor.getLong(offset + 3));
        entity.setPerson_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMax_sum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNow_sum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setLocal_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getLocal_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getLocal_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
