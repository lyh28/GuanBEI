package com.lyh.guanbei.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyh.guanbei.bean.RecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_BEAN".
*/
public class RecordBeanDao extends AbstractDao<RecordBean, Long> {

    public static final String TABLENAME = "RECORD_BEAN";

    /**
     * Properties of entity RecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Record_id = new Property(0, Long.class, "record_id", true, "_id");
        public final static Property User_id = new Property(1, long.class, "user_id", false, "USER_ID");
        public final static Property Book_id = new Property(2, long.class, "book_id", false, "BOOK_ID");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Amount = new Property(4, String.class, "amount", false, "AMOUNT");
        public final static Property Payto = new Property(5, String.class, "payto", false, "PAYTO");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property Category = new Property(8, String.class, "category", false, "CATEGORY");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
    }


    public RecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: record_id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: user_id
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 2: book_id
                "\"TIME\" TEXT," + // 3: time
                "\"AMOUNT\" TEXT NOT NULL ," + // 4: amount
                "\"PAYTO\" TEXT," + // 5: payto
                "\"CONTENT\" TEXT," + // 6: content
                "\"REMARK\" TEXT," + // 7: remark
                "\"CATEGORY\" TEXT," + // 8: category
                "\"STATUS\" INTEGER NOT NULL );"); // 9: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordBean entity) {
        stmt.clearBindings();
 
        Long record_id = entity.getRecord_id();
        if (record_id != null) {
            stmt.bindLong(1, record_id);
        }
        stmt.bindLong(2, entity.getUser_id());
        stmt.bindLong(3, entity.getBook_id());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindString(5, entity.getAmount());
 
        String payto = entity.getPayto();
        if (payto != null) {
            stmt.bindString(6, payto);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(9, category);
        }
        stmt.bindLong(10, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordBean entity) {
        stmt.clearBindings();
 
        Long record_id = entity.getRecord_id();
        if (record_id != null) {
            stmt.bindLong(1, record_id);
        }
        stmt.bindLong(2, entity.getUser_id());
        stmt.bindLong(3, entity.getBook_id());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindString(5, entity.getAmount());
 
        String payto = entity.getPayto();
        if (payto != null) {
            stmt.bindString(6, payto);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(9, category);
        }
        stmt.bindLong(10, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordBean readEntity(Cursor cursor, int offset) {
        RecordBean entity = new RecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // record_id
            cursor.getLong(offset + 1), // user_id
            cursor.getLong(offset + 2), // book_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.getString(offset + 4), // amount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // payto
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // category
            cursor.getInt(offset + 9) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordBean entity, int offset) {
        entity.setRecord_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getLong(offset + 1));
        entity.setBook_id(cursor.getLong(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAmount(cursor.getString(offset + 4));
        entity.setPayto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCategory(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordBean entity, long rowId) {
        entity.setRecord_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordBean entity) {
        if(entity != null) {
            return entity.getRecord_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordBean entity) {
        return entity.getRecord_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
